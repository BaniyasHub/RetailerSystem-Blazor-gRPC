@using Retailer.Common.Utility
@inject ILocalStorageService _localStorageService
@inject ISyncLocalStorageService _synclocalStorageService
@inject ICartService _cartService
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand ml-2" href="#">Retailer</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active p-0">
                <NavLink class="nav-link" href="/">
                    <span class="p-2">Home</span>
                </NavLink>

            </li>
            <li>
                <NavLink class="nav-link" href="/cart">
                    <span class="p-2">
                        <i class="bi bi-cart"> </i> (@GetCartCount())
                    </span>
                </NavLink>
            </li>
        </ul>
       
    </div>
</nav>

@code {
    private int GetCartCount()
    {
        var cart = _synclocalStorageService.GetItem<List<ShoppingCart>>(SD.ShoppingCart);

        return cart == null ? 0 : cart.Count();
    }

    public void Dispose()
    {
        _cartService.Onchange -= StateHasChanged;
    }

    protected override void OnInitialized()
    {
        _cartService.Onchange += StateHasChanged;
    }

}