

Registering Grpc Client with Configuration
---------------------------------------------------
**builder.Services
    .AddGrpcClient<Product.ProductClient>("ProductAuthenticated", o =>
        {
            o.Address = new Uri("http://localhost:5251");
        }).ConfigurePrimaryHttpMessageHandler(
        () => new GrpcWebHandler(new HttpClientHandler()));

	//AddingInterceptor
	//ConfiguringChannel
	//AddingCallCredentials

Initiating the Client
---------------------------------------------------
private readonly Greeter.GreeterClient _client;

    public AggregatorService(GrpcClientFactory grpcClientFactory)
    {
        _client = grpcClientFactory.CreateClient<Greeter.GreeterClient>("GreeterAuthenticated");
    }



Registering GrpcClient
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
After registering GrpcClients in IOC, we can reuse the channel by using GrpcClientFactory, this will create different clients from same channel. (Channel is expensive)
In order to send request from Client Apps to Grpc Services we need to use GrpcWebHandler as the message handler of the channel.
While creating GrpcWebHandler we should select GrpcWebText as GrpcWebMode because server streaming requires it. 
If server streaming is not used in your app then GrpcWeb is recommended because it produces smaller messages.

We have three steps that we can manipulate the client:

HttpMessageHandler >> HttpClientHandler >> GrpcWebHandler has significant options as messageHandler:
    //  MaxConnectionsPerServer = 200,
    //  AllowAutoRedirect = true,
    //  UseProxy = true,    
    //  UseCookies = true,  
    //  UseDefaultCredentials = true,
    >>>>As GrpcWebHandler
    //  HttpVersion
    //  InnerHandler
    //  GrpcWebMode
        
We pass this handler to GrpcChannel and it has:
    // x.HttpHandler = grpcWebHandler;  >>> These two can't be assigned at the same time
    // x.HttpClient = httpClient;       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // x.ServiceConfig = new ServiceConfig() { MethodConfigs = { retryMethodConfig } }; //Retry and Hedging Policy

We are creating GrpcClient with these channel and this Client has:
    //  x.Address = new Uri("http://localhost:7042");
    //  x.Interceptors.Add()


