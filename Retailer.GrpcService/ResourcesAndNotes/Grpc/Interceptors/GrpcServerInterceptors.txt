
Server Methods
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Interceptor methods to override for server:
---------------------------------------------
UnaryServerHandler: Intercepts a unary RPC.
ClientStreamingServerHandler: Intercepts a client-streaming RPC.
ServerStreamingServerHandler: Intercepts a server-streaming RPC.
DuplexStreamingServerHandler: Intercepts a bidirectional-streaming RPC.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Server Example
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 public override async Task<TResponse> UnaryServerHandler<TRequest, TResponse>(
        TRequest request,
        ServerCallContext context,
        UnaryServerMethod<TRequest, TResponse> continuation)
    {
        _logger.LogInformation($"Starting receiving call. Type: {MethodType.Unary}. " +
            $"Method: {context.Method}.");
        try
        {
            return await continuation(request, context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error thrown by {context.Method}.");
            throw;
        }
    }

Overriding UnaryServerHandler:
------------------------------------------
1/Intercepts an incoming unary call.
2/Logs details about the call.
3/Calls the continuation parameter passed into the method. This invokes the next interceptor in the chain or the service handler if this is the last interceptor.
4/Awaiting the continuation allows logic to be added after the service method has executed. By awaiting the continuation in a try-catch block, errors from methods can be logged.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Server Examination
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The signature of both client and server interceptors methods are similar:
-----------------------------------------------------------------------------------
** continuation stands for a delegate for an incoming RPC calling the next interceptor in the chain or the service handler (if there is no interceptor left in the chain).
** Similar to client interceptors, you can call it any time and there's no need to return a response directly from the continuation delegate.
** Outbound logic can be added after a service handler has executed by awaiting the continuation.
** context carries metadata associated with the server-side call, such as request metadata, deadlines and cancellation, or RPC result.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Server Registration
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
gRPC server interceptors are configured at startup in two ways:
---------------------------------------------------------------
1/Adds gRPC to the app with AddGrpc.
Configures ServerLoggerInterceptor for all services by adding it to the service option's Interceptors collection.

2/An interceptor can also be configured for a specific service by using AddServiceOptions and specifying the service type.
---------------------------------------------------------------------------------------------------------------------------


Interceptors are run in the order that they're added to the InterceptorCollection.
If both global and single service interceptors are configured, then globally-configured interceptors are run before those configured for a single service.
By default, gRPC server interceptors have a per-request lifetime. Overriding this behavior is possible through registering the interceptor type with dependency injection.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------