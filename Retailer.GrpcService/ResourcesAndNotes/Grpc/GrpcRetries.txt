Retry
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

gRPC calls can be interrupted by transient faults. Transient faults include:
------------------------------------------------------------------------------------------------------
Momentary loss of network connectivity.
Temporary unavailability of a service.
Timeouts due to server load.
When a gRPC call is interrupted, the client throws an RpcException with details about the error.
The client app must catch the exception and choose how to handle the error.


Calls are retried when:
---------------------------------------------------
The failing status code matches a value in RetryableStatusCodes.
The previous number of attempts is less than MaxAttempts.
The call hasn't been commited.
The deadline hasn't been exceeded.


A gRPC call becomes committed in three scenarios:
---------------------------------------------------
Committed calls won't retry, regardless of the status code or the previous number of attempts.

1/The client receives response headers. Response headers are sent by the server when ServerCallContext.WriteResponseHeadersAsync is called.
2/When the first message is written to the server response stream.
3/The client's outgoing message (or messages if streaming) has exceeded the client's maximum buffer size.

MaxRetryBufferSize and MaxRetryBufferPerCallSize are configured on the channel.


Streaming calls can be used with gRPC retries, but there are important considerations when they are used together:
---------------------------------------------------
Server streaming, bidirectional streaming: Streaming RPCs that return multiple messages from the server won't retry after the first message has been received.
Apps must add additional logic to manually re-establish server and bidirectional streaming calls.
---------------------------------------------------
Client streaming, bidirectional streaming: Streaming RPCs that send multiple messages to the server won't retry if the outgoing messages have exceeded the client's maximum buffer size.
The maximum buffer size can be increased with configuration.


Hedging
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
Hedging is an alternative retry strategy. Hedging enables aggressively sending multiple copies of a single gRPC call without waiting for a response. 
Hedged gRPC calls may be executed multiple times on the server and the first successful result is used.
It's important that hedging is only enabled for methods that are safe to execute multiple times without adverse effect.

Hedging has pros and cons when compared to retries:
---------------------------------------------------
An advantage to hedging is it might return a successful result faster. It allows for multiple simultaneously gRPC calls and will complete when the first successful result is available.
A disadvantage to hedging is it can be wasteful. Multiple calls could be made and all succeed. Only the first result is used and the rest are discarded.