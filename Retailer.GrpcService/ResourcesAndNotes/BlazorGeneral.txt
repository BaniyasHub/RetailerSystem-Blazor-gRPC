
Blazor ToDo
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Local Storage/Session Storage/In-Memory/Redis
Learn the usage of @implements IDisposable and @attribute 
Try different Hangfire usages
Unit and Integration Tests >> Grpc/Blazor >> Retailer.Tests
Gather Ef Core best practites >>Retailer/DataAccess/Repository
Learn Route Constraints
Docker fundamentals
Web API overview and best practises >> Retailer.WebAPI
Find the usages of ElementRef-Cascadingparameter-RenderFragment
Impement JWT and Cookie Authentication & Authorization using built-in components like Authorizeview-AuthorizeRouteView-CascadingAuthenticationState
Enable client to get data without asking for //Broadcasting with WebSockets & SignalR
Investigate Routing Terminology



1/Blazor
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 a)Components
 ---------------------------------------------------
	**Roughly every component can nest in other components

	Components can manipulate each other like :
	>> Child invokes Parent with EventCallBacks
	>> Parent invokes Child with initiating and using object of the Child with @ref keyword

	If there is no Parent-Child relationship we can use Event Delegates:
	>> Register IServiceX which has EventDelegateX property
	>> ComponentA and ComponentB injected with IServiceA
	>> ComponentA assign a method to EventDelegateX inside OnInitialized method
	>> ComponentB call a method of IServiceX which invokes EventDelegateX

	Components have parameters that can be filled from parent or query
	That parameters can be casual properties, eventcallbacks or object of the child compenent
	Also we have tools like RenderFragment & CascadingParameter

	Blazor WebAssembly apps don't currently have a concept of DI scopes. Scoped-registered services behave like Singleton services.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 b)LifeCycles with Sequence
 ---------------------------------------------------
    >> OnInitialized 
	>> OnParametersSet 
	>> OnAfterRender 

	Investigate Best Practices
	For now use StateHasChanged where you don't see the component doesn't render itself when it should do

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 c)Routing
 ---------------------------------------------------
	NavigationManager handles most of the routing between pages and manipulating URL
	If route has a parameter there must be corresponding property with same name and Parameter attribute in razor component

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 d)Events
 ---------------------------------------------------
	We have razor syntax as well as new built in attributes that can invoke C# methods in code section of the page like:
	Onclick, Onchange, OnDrag
	Also new tools like Virtualize, EditForm, InputText etc.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


